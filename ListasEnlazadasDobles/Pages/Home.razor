@page "/"

@using ListasEnlazadasDobles.Services
@using ListasEnlazadasDobles.Models

<PageTitle>ListaEnlazadaDoble</PageTitle>

<h3>Lista Enlazada Doble</h3>

<div style="margin-bottom: 10px;">
    <input @bind="nuevoValor" placeholder="Ingrese un valor" />
    <button @onclick="AgregarAlInicio">Agregar Nodo al Inicio</button>
</div>

<div style="margin-bottom: 10px;">
    <input @bind="posicionX" type="number" placeholder="Ingrese la posición después de la cual desea insertar" />
    <input @bind="nuevoValor" placeholder="Ingrese un valor" />
    <button @onclick="InsertarDespuesDePosicionX">Insertar Después de posición X</button>
</div>

<div style="margin-bottom: 10px;">
    <button @onclick="QuitarAlFinal">Quitar Nodo al Final</button>
</div>

<div style="margin-bottom: 10px;">
    <input @bind="datoEliminar" placeholder="Ingrese el dato a eliminar" />
    <button @onclick="EliminarAntesDeX">Eliminar Nodo con Dato X</button>
</div>

<div style="margin-bottom: 10px;">
    <div style="color: green;">@mensaje</div>
    <div style="color: red;">@error</div>
</div>

@if (lista != null && !lista.IsEmpty)
{
    <ul>
        @foreach (var nodo in nodos)
        {
            <li>@nodo.Informacion</li>
        }
    </ul>
}

@code {
    private ListaEnlazadaDoble lista = new ListaEnlazadaDoble();
    private List<Nodo> nodos = new List<Nodo>();
    private string? nuevoValor;
    private int posicionX;
    private string? datoEliminar;
    private string mensaje = "";
    private string error = "";

    private void AgregarAlInicio()//Método que se ejecuta cuando el usuario hace clic en el botón "Agregar Nodo al Inicio". Agrega un nuevo nodo con el valor ingresado al inicio de la lista enlazada doble.
    {
        if (!string.IsNullOrWhiteSpace(nuevoValor))
        {
            mensaje = lista.AgregarAlInicio(nuevoValor);
            ActualizarNodos();
            nuevoValor = string.Empty;
        }
        else
        {
            error = "Ingrese un valor válido.";
        }
    }

    private void InsertarDespuesDePosicionX()//Método que se ejecuta cuando el usuario hace clic en el botón "Insertar Después de posición X". Inserta un nuevo nodo con el valor ingresado después de la posición especificada en la lista enlazada doble.
    {
        if (!string.IsNullOrWhiteSpace(nuevoValor))
        {
            mensaje = lista.InsertarDespuesDePosicionX(posicionX, nuevoValor);
            ActualizarNodos();
            nuevoValor = string.Empty;
            posicionX = 0;
        }
        else
        {
            error = "Ingrese un valor válido.";
        }
    }

    private void QuitarAlFinal()//Método que se ejecuta cuando el usuario hace clic en el botón "Quitar
    {
        mensaje = lista.QuitarAlFinal();
        ActualizarNodos();
    }

    private void EliminarAntesDeX()//Método que se ejecuta cuando el usuario hace clic en el botón "Eliminar Nodo con Dato X". Elimina el nodo que contiene el dato especificado antes de la posición especificada en la lista enlazada doble.
    {
        if (!string.IsNullOrEmpty(datoEliminar))
        {
            mensaje = lista.EliminarAntesDeX(datoEliminar);
            ActualizarNodos();
            datoEliminar = null;
        }
        else
        {
            error = "Ingrese un dato válido.";
        }
    }

    private void ActualizarNodos()//Método que actualiza la lista de nodos con los nodos actuales presentes en la lista enlazada doble. Se utiliza para reflejar los cambios en la interfaz de usuario después de realizar operaciones en la lista enlazada.
    {
        nodos.Clear();
        Nodo? nodoActual = lista.PrimerNodo;
        while (nodoActual != null)
        {
            nodos.Add(nodoActual);
            nodoActual = nodoActual.LigaSiguiente;
        }
    }
}





