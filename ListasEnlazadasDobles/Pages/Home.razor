@page "/"

@using ListasEnlazadasDobles.Models
@using ListasEnlazadasDobles.Services
@* @inject ListaEnlazadaDoble listaEnlazadaDobleService *@

<h3>Gestión de Lista Enlazada Doble</h3>

<div>
    <label for="nuevoValor">Valor del nuevo nodo:</label>
    <input type="text" @bind="nuevoValor" />
    <button @onclick="InsertarAlInicio">Insertar al Inicio</button>
    <input type="number" @bind="posicion" />
</div>

@* @if (listaEnlazadaDobleService.PrimerNodo != null) *@
@* { *@
    <div>
        <button @onclick="MoverAnterior">Anterior</button>
        <button @onclick="MoverSiguiente">Siguiente</button>
        <button @onclick="EliminarAntes">Eliminar Antes</button>
        <button @onclick="EliminarDespues">Eliminar Después</button>
    </div>
    <p>Nodo Actual: @nodoActualValor</p>
    <p>Visualización de la Lista:</p>
    <ul>
        @foreach (var nodo in ObtenerNodos())
        {
            <li>@nodo.Informacion</li>
        }
    </ul>
@* } *@

@code {
    private string nuevoValor;
    private string nodoActualValor;
    private int posicion;
    public ListaEnlazadaDoble Lista { get; set; } = new();

    private void InsertarAlInicio()
    {
        var nuevoNodo = new Nodo  (nuevoValor) ;
        Lista.InsertarNodoAlInicio(nuevoNodo);
        nodoActualValor = nuevoValor;
        nuevoValor = string.Empty;
        //StateHasChanged();
    }

    private void MoverSiguiente()
    {
        Lista.Siguiente();
       // ActualizarNodoActual();
    }

    private void MoverAnterior()
    {
        Lista.Anterior();
       // ActualizarNodoActual();
    }

    private void EliminarAntes()
    {
        //int posicion = ObtenerPosicionNodoActual();
        Lista.EliminarNodoAntesDe(posicion);
        //ActualizarNodoActual();
    }

    private void EliminarDespues()
    {
        //int posicion = ObtenerPosicionNodoActual();
        Lista.EliminarNodoDespuesDe(posicion);
        //ActualizarNodoActual();
    }

    // private void ActualizarNodoActual()
    // {
    //     nodoActualValor = listaEnlazadaDobleService.NodoActual?.Informacion;
    //     StateHasChanged();
    // }

    private IEnumerable<Nodo> ObtenerNodos()
    {
        var nodos = new List<Nodo>();
        var nodoActual = Lista.PrimerNodo;
        while (nodoActual != null)
        {
            nodos.Add(nodoActual);
            nodoActual = nodoActual.LigaSiguiente;
        }
        return nodos;
    }

//     private int ObtenerPosicionNodoActual()
//     {
//         int posicion = 1;
//         var nodoActual = listaEnlazadaDobleService.PrimerNodo;
//         while (nodoActual != listaEnlazadaDobleService.NodoActual && nodoActual != null)
//         {
//             posicion++;
//             nodoActual = nodoActual.LigaSiguiente;
//         }
//         return posicion;
//     }
 }
