@page "/"
@using ListasEnlazadasDobles.Models
@using ListasEnlazadasDobles.Services

<div >
    <div class="navbar">
        <Button Color="ButtonColor.Success" @onclick="() => OnShowOffcanvasClick(Placement.Start)">
            <div class="menu" >
                <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5" />
                </svg>
            </div>
        </Button>

        <div class="search">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"  fill="currentColor" class="bi bi-search ml-1" viewBox="0 0 16 16">
                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
            </svg>
            <input class="search-input" type="text"/>
        </div>
    </div>
    <div class="NotFound">
        <h1 class="NotFound-title">No contamos con datos.</h1>
        <p class="NotFound-parrafo">Ingrese datos para activar el reproductor</p>
        <img class="NotFound-img" src="./OBJECTS.svg" alt="Texto alternativo" />
    </div>

    <footer class="footer-home">
        <h2 class="logo">StreamSync</h2>
    </footer>
</div>

<Offcanvas Class="bg-success" @ref="offcanvas" Title="Administracion de Nodos" Placement="@placement" Size="OffcanvasSize.Large">
    <BodyTemplate >
        <div class="row">
            <div class="left-container col-6">
                <div class="insertar-container">
                    <label class="subtitle-container">Inserción de nodo</label>
                    <button class="btn-txt insertar ">Insertar al inicio</button>
                    <button class="btn-txt insertar ">Insertar al final</button>
                    <button class="btn-txt insertar ">Insertar antes de un dato X</button>
                    <button class="btn-txt insertar ">Insertar despues de un dato X</button>
                    <button class="btn-txt insertar ">Insertar antes de una posición X</button>
                    <button class="btn-txt insertar ">Insertar en una posición X</button>
                    <button class="btn-txt insertar ">Insertar despues de una posición X</button>
                </div>
                <div class="eliminar-container">
                    <label class="subtitle-container">Eliminación de nodo</label>
                    <button class="btn-txt eliminar ">Eliminar al inicio</button>
                    <button class="btn-txt eliminar ">Eliminar al final</button>
                    <button class="btn-txt eliminar ">Eliminar antes de un dato X</button>
                    <button class="btn-txt eliminar ">Eliminar un dato X</button>
                    <button class="btn-txt eliminar ">Eliminar antes de un dato X</button>
                    <button class="btn-txt eliminar ">Eliminar antes de una posición X</button>
                    <button class="btn-txt eliminar ">Eliminar en una posición X</button>
                    <button class="btn-txt eliminar ">Eliminar despues de una posición X</button>
                </div>
                <div class="extra-container">
                    <label class="subtitle-container">Funciones extras</label>
                    <button class="btn-txt extra">Recorrido recursivo</button>
                    <button class="btn-txt extra">Ordenamiento</button>
                </div>
            </div>
            <div class="col-4">
                <input type="type" name="name" value="" />
                <input type="type" name="name" value="" />
                <input type="type" name="name" value="" />
                <input type="type" name="name" value="" />
                <div>

                    <button>

                    </button>
                </div>
            </div>
        </div>
    </BodyTemplate>
</Offcanvas>


@code{

    private Offcanvas offcanvas = default!;
    private Placement placement;

    private async Task OnShowOffcanvasClick(Placement placement)
    {
        this.placement = placement;
        await offcanvas.ShowAsync();
    }


    ListaEnlazadaDoble lista;

    string YoutubeLink = string.Empty;
    string YoutubeId = string.Empty;
    string Mensaje = null;
    string MensajeError = null;
    int posicion = 0;
    string datoX = string.Empty;
    string MensajeBuscar = string.Empty;
    string DatoBuscado = string.Empty;
    string Nombre = string.Empty;

    protected override void OnInitialized()
    {
        lista = new ListaEnlazadaDoble();
    }

    void PlayVideo()
    {
        if (lista.NodoActual is not null)
        {
            YoutubeLink = lista.NodoActual.Informacion;

            var videoId = GetVideoId(YoutubeLink);

            if (!string.IsNullOrEmpty(videoId))
            {
                YoutubeId = $"https://www.youtube.com/embed/{videoId}";
            }

        }


    }

    string GetVideoId(string link)
    {
        //creamos un objeto de tipo Uri
        var uri = new Uri(link);

        // obtenemos el query string del uri
        var query = uri.Query;

        // obtenemos todos los parametros del query string
        var queryparams = System.Web.HttpUtility.ParseQueryString(query);

        var videoId = queryparams["v"];

        return videoId;
    }

    void First()
    {
        lista.NodoActual = lista.PrimerNodo;
        PlayVideo();

    }

    void Before()
    {
        lista.Anterior();
        PlayVideo();
    }

    void Next()
    {
        lista.Siguiente();
        PlayVideo();

    }

    void Last()
    {
        lista.NodoActual = lista.UltimoNodo;
        PlayVideo();

    }

    void SaveFinal()
    {
        var nuevoNodo = new Nodo(YoutubeLink, Nombre);

        if (string.IsNullOrEmpty(YoutubeLink) || string.IsNullOrEmpty(Nombre))
        {
            MensajeError = "El campo Informacion y Nombre son requeridos";
            return;
        };

        MensajeError = string.Empty;
        Mensaje = lista.InsertarNodoAlFinal(nuevoNodo);

        YoutubeLink = string.Empty;
        Nombre = string.Empty;

        PlayVideo();
    }


    void SaveInicio()
    {
        var nuevoNodo = new Nodo(YoutubeLink, Nombre);

        Mensaje = lista.InsertarNodoAlInicio(nuevoNodo);

        PlayVideo();

        YoutubeLink = string.Empty;
        Nombre = string.Empty;
    }

    void EliminaNodoAntesDePosicionX()
    {
        Mensaje = lista.EliminarNodoAntesDe(posicion);
        PlayVideo();
    }

    void EliminaNodoDespuesDePosicionX()
    {
        Mensaje = lista.EliminarNodoDespuesDe(posicion);
        PlayVideo();
    }

    void InsertarNodoAntesDePosicionX()
    {

        Mensaje = lista.InsertarAntesDe(YoutubeLink, Nombre, posicion);
        PlayVideo();
    }

    void EliminarNodoEnPosicionX()
    {
        Mensaje = lista.EliminarEn(posicion);
        PlayVideo();
    }

    void InsertarDespuesDePosicionX()
    {
        Mensaje = lista.InsertarDespuesDePosicionX(posicion, YoutubeLink, Nombre);
        PlayVideo();
    }

    void EliminarAlFinal()
    {
        Mensaje = lista.QuitarAlFinal();
        PlayVideo();
    }

    void EliminarAntesDeUnDatoX()
    {
        Mensaje = lista.EliminarAntesDeX(YoutubeLink);
        PlayVideo();
    }

    void EliminarNodoAlInicio()
    {
        Mensaje = lista.EliminarNodoInicio();
        PlayVideo();
    }

    void InsertarNodoAntesDeUnDatoX()
    {
        var nuevoNodo = new Nodo(YoutubeLink, Nombre);
        Mensaje = lista.InsertarAntesDeUnDatoX(datoX, nuevoNodo);
        PlayVideo();
    }

    void InsertarPosicionX()
    {
        Mensaje = lista.InsertarEnPosicion(posicion, YoutubeLink, Nombre);
        PlayVideo();
    }

    void InsertarNodoDespuesDeUnDatoX()
    {
        var nuevoNodo = new Nodo(YoutubeLink, Nombre);
        Mensaje = lista.InsertarDespuesDeUnDatoX(datoX, nuevoNodo);
        PlayVideo();
    }


    void BuscarNodoPorDato()
    {
        var dato = DatoBuscado;
        MensajeBuscar = lista.BuscarNodo(dato);
        DatoBuscado = string.Empty;
        //YoutubeLink = lista.BuscarNodo(dato);

        PlayVideo();


    }

    void OrdenarLista()
    {
        Mensaje = lista.OrdenarLista();

    }


    private List<Nodo> nodosAux = new List<Nodo>();
    void RecorrerListaRecursivamente()
    {
        nodosAux.Clear();
        ListaEnlazadaDoble.RecorrerRecursivamente(lista.PrimerNodo, nodosAux);
        // Mensaje = string.Join(" -> ", nodosAux.Select(n => $"{n.Informacion} - {n.Nombre}"));

        PlayVideo();
    }
    
  }






@* 

      

<div class="d-flex justify-content-center mb-2">
    <iframe src="@YoutubeId" width="800" height="400" frameborder="0" allowfullscreen></iframe>
</div>




<div class="d-flex justify-content-center mb-2">
    <button @onclick="First" class="me-2 btn btn-primary">Primero</button>
    <button @onclick="Before" class="me-2 btn btn-success">Anterior</button>
    <button @onclick="Next" class="me-2 btn btn-danger">Siguiente</button>
    <button @onclick="Last" class="me-2 btn btn-warning">Final</button>
</div>




<div class="row">
    <input type="text" class="form-control mb-2" @bind-value="YoutubeLink" placeholder="Informacio" />
    <input type="number" class="form-control mb-2" @bind-value="posicion" placeholder="posicion" />
    <input type="text" class="form-control mb-2" @bind-value="datoX" placeholder="dato" />
    <input type="text" class="form-control mb-2" @bind-value="DatoBuscado" placeholder="buscar" />
    <input type="text" class="form-control mb-2" @bind-value="Nombre" placeholder="Nombre" />

    <button class="btn btn-success" @onclick="SaveFinal">Guardar al Final</button>
    <button class="btn btn-primary" @onclick="SaveInicio">Guardar al Inicio</button>
    <button class="btn btn-danger" @onclick="EliminaNodoAntesDePosicionX">Eliminar Nodo Antes de Posicion X</button>
    <button class="btn btn-warning" @onclick="EliminaNodoDespuesDePosicionX">Eliminar Nodo Despues de Posicion X</button>
    <button class="btn btn-info" @onclick="InsertarNodoAntesDePosicionX">Insertar Nodo Antes de Posicion X</button>
    <button class="btn btn-secondary" @onclick="EliminarNodoEnPosicionX">Eliminar Nodo en Posicion X</button>
    <button class="btn btn-dark" @onclick="InsertarDespuesDePosicionX">Insertar Despues de Posicion X</button>
    <button class="btn btn-danger" @onclick="EliminarAlFinal">Eliminar al Final</button>
    <button class="btn btn-warning" @onclick="EliminarAntesDeUnDatoX">Eliminar Antes de un Dato X</button>
    <button class="btn btn-info" @onclick="EliminarNodoAlInicio">Eliminar Nodo al Inicio</button>
    <button class="btn btn-secondary" @onclick="InsertarNodoAntesDeUnDatoX">Insertar Nodo Antes de un Dato X</button>
    <button class="btn btn-dark" @onclick="InsertarPosicionX">Insertar en Posicion X</button>
    <button class="btn btn-danger" @onclick="InsertarNodoDespuesDeUnDatoX">Insertar Nodo Despues de un Dato X</button>
    <button class="btn btn-warning" @onclick="BuscarNodoPorDato">Buscar Nodo</button>
    <button class="btn btn-info" @onclick="OrdenarLista">Ordenar Lista</button>
    <button class="btn btn-info" @onclick="RecorrerListaRecursivamente">Recorrer Lista Recursivamente</button>



    @{
        var contador = 1;
    }

    @foreach (var nodo in nodosAux)
    {
        <tr>
            <th scope="row">@(contador++)</th>
            <td>@nodo.Nombre | @nodo.Informacion</td>


        </tr>
    }


</div>

<p>@Mensaje</p>
<p>@MensajeBuscar</p> *@