﻿
@page "/"
@using ListasEnlazadasDobles.Models
@using ListasEnlazadasDobles.Services
@using ListasEnlazadasDobles.Validators

<PageTitle>ListaEnlazadaDoble</PageTitle>


@* Reproductor *@

<div class="d-flex justify-content-center mb-2">
    <iframe src="@YoutubeId" width="800" height="400" frameborder="0" allowfullscreen></iframe>
</div>


@* botones *@

<div class="d-flex justify-content-center mb-2">
    <button @onclick="First" class="me-2 btn btn-primary">Primero</button>
    <button @onclick="Before" class="me-2 btn btn-success">Anterior</button>
    <button @onclick="Next" class="me-2 btn btn-danger">Siguiente</button>
    <button @onclick="Last" class="me-2 btn btn-warning">Final</button>
</div>


@* para guardar *@

<div class="row">
    <input type="text" class="form-control mb-2" @bind-value="YoutubeLink" placeholder="Informacio" />
    <input type="number" class="form-control mb-2" @bind-value="posicion" placeholder="posicion" />
    <input type="text" class="form-control mb-2" @bind-value="datoX" placeholder="dato" />
    <input type="text" class="form-control mb-2" @bind-value="DatoBuscado" placeholder="buscar" />
    <input type="text" class="form-control mb-2" @bind-value="Nombre" placeholder="Nombre" />

    <button class="btn btn-success" @onclick="SaveFinal">Guardar al Final</button>
    <button class="btn btn-primary" @onclick="SaveInicio">Guardar al Inicio</button>
    <button class="btn btn-danger" @onclick="EliminaNodoAntesDePosicionX">Eliminar Nodo Antes de Posicion X</button>
    <button class="btn btn-warning" @onclick="EliminaNodoDespuesDePosicionX">Eliminar Nodo Despues de Posicion X</button>
    <button class="btn btn-info" @onclick="InsertarNodoAntesDePosicionX">Insertar Nodo Antes de Posicion X</button>
    <button class="btn btn-secondary" @onclick="EliminarNodoEnPosicionX">Eliminar Nodo en Posicion X</button>
    <button class="btn btn-dark" @onclick="InsertarDespuesDePosicionX">Insertar Despues de Posicion X</button>
    <button class="btn btn-danger" @onclick="EliminarAlFinal">Eliminar al Final</button>
    <button class="btn btn-warning" @onclick="EliminarAntesDeUnDatoX">Eliminar Antes de un Dato X</button>
    <button class="btn btn-info" @onclick="EliminarNodoAlInicio">Eliminar Nodo al Inicio</button>
    <button class="btn btn-secondary" @onclick="InsertarNodoAntesDeUnDatoX">Insertar Nodo Antes de un Dato X</button>
    <button class="btn btn-dark" @onclick="InsertarPosicionX">Insertar en Posicion X</button>
    <button class="btn btn-danger" @onclick="InsertarNodoDespuesDeUnDatoX">Insertar Nodo Despues de un Dato X</button>
    <button class="btn btn-warning" @onclick="BuscarNodoPorDato">Buscar Nodo</button>
    <button class="btn btn-info" @onclick="OrdenarLista">Ordenar Lista</button>
    <button class="btn btn-info" @onclick="RecorrerListaRecursivamente">Recorrer Lista Recursivamente</button>



    @{
        var contador = 1;
    }

    @foreach (var nodo in nodosAux)
    {
        <tr>
            <th scope="row">@(contador++)</th>
            <td>@nodo.Nombre | @nodo.Informacion</td>

            
        </tr>
    }


</div>

<p>@Mensaje</p>
<p>@MensajeBuscar</p>

@code {
    ListaEnlazadaDoble lista;

    string YoutubeLink = string.Empty;
    string YoutubeId = string.Empty;
    string Mensaje = null;
    string MensajeError = null;
    int? posicion = null;
    string datoX = string.Empty;
    string MensajeBuscar = string.Empty;
    string DatoBuscado = string.Empty;
    string Nombre = string.Empty;

    protected override void OnInitialized()
    {
        lista = new ListaEnlazadaDoble();
    }

    void PlayVideo()
    {
        if (lista.NodoActual is not null)
        {
            YoutubeLink = lista.NodoActual.Informacion;

            var videoId = GetVideoId(YoutubeLink);

            if (!string.IsNullOrEmpty(videoId))
            {
                YoutubeId = $"https://www.youtube.com/embed/{videoId}";
            }

        }


    }

    string GetVideoId(string link)
    {
        //creamos un objeto de tipo Uri
        var uri = new Uri(link);

        // obtenemos el query string del uri
        var query = uri.Query;

        // obtenemos todos los parametros del query string
        var queryparams = System.Web.HttpUtility.ParseQueryString(query);

        var videoId = queryparams["v"];

        return videoId;
    }

    void First()
    {
        lista.NodoActual = lista.PrimerNodo;
        PlayVideo();

    }

    void Before()
    {
        lista.Anterior();
        PlayVideo();
    }

    void Next()
    {
        lista.Siguiente();
        PlayVideo();

    }

    void Last()
    {
        lista.NodoActual = lista.UltimoNodo;
        PlayVideo();

    }

    void SaveFinal()
    {
        var nuevoNodo = new Nodo(YoutubeLink, Nombre);

        if (string.IsNullOrEmpty(YoutubeLink) || string.IsNullOrEmpty(Nombre))
        {
            MensajeError = "El campo Informacion y Nombre son requeridos";
            return;
        };

        MensajeError = string.Empty;
        Mensaje = lista.InsertarNodoAlFinal(nuevoNodo);

        YoutubeLink = string.Empty;
        Nombre = string.Empty;

        PlayVideo();
    }


    void SaveInicio()
    {
        var nuevoNodo = new Nodo(YoutubeLink, Nombre);

        if (string.IsNullOrEmpty(YoutubeLink) || string.IsNullOrEmpty(Nombre))
        {
            MensajeError = "El campo Informacion y Nombre son requeridos";
            return;
        };

        MensajeError = string.Empty;
        Mensaje = lista.InsertarNodoAlInicio(nuevoNodo);

        YoutubeLink = string.Empty;
        Nombre = string.Empty;

        PlayVideo();
    }

    void EliminaNodoAntesDePosicionX()
    {
        Mensaje = lista.EliminarNodoAntesDe(posicion ?? 0);
        (MensajeError, posicion) = MensajeValidator.MensajeEliminar(Mensaje, MensajeError, posicion);
        PlayVideo();
    }

    void EliminaNodoDespuesDePosicionX()
    {
        Mensaje = lista.EliminarNodoDespuesDe(posicion ?? 0);
        (MensajeError, posicion) = MensajeValidator.MensajeEliminar(Mensaje, MensajeError, posicion);
        PlayVideo();
    }

    void InsertarNodoAntesDePosicionX()
    {

        Mensaje = lista.InsertarAntesDe(YoutubeLink, Nombre, posicion ?? 0);
        (MensajeError,Nombre, posicion) = MensajeValidator.MensajeInsertar(Mensaje, MensajeError, posicion, Nombre);

        YoutubeLink = string.Empty;
        PlayVideo();
    }

    void EliminarNodoEnPosicionX()
    {
        Mensaje = lista.EliminarEn(posicion ?? 0);
        (MensajeError, posicion) = MensajeValidator.MensajeEliminar(Mensaje, MensajeError, posicion);
        PlayVideo();
    }

    void InsertarDespuesDePosicionX()
    {
        Mensaje = lista.InsertarDespuesDePosicionX(posicion ?? 0, YoutubeLink, Nombre);
        (MensajeError, Nombre, posicion) = MensajeValidator.MensajeInsertar(Mensaje, MensajeError, posicion, Nombre);

        YoutubeLink = string.Empty;
        PlayVideo();
    }

    void EliminarAlFinal()
    {
        Mensaje = lista.QuitarAlFinal();
        (MensajeError, posicion) = MensajeValidator.MensajeEliminar(Mensaje, MensajeError, posicion);
        PlayVideo();
    }

    void EliminarAntesDeUnDatoX()
    {
        Mensaje = lista.EliminarAntesDeX(datoX);
        (MensajeError, posicion) = MensajeValidator.MensajeEliminar(Mensaje, MensajeError, posicion);
        datoX = string.Empty;

        PlayVideo();
    }

    void EliminarNodoAlInicio()
    {
        Mensaje = lista.EliminarNodoInicio();
        (MensajeError, posicion) = MensajeValidator.MensajeEliminar(Mensaje, MensajeError, posicion);

        PlayVideo();
    }

    void InsertarNodoAntesDeUnDatoX()
    {
        var nuevoNodo = new Nodo(YoutubeLink, Nombre);
        Mensaje = lista.InsertarAntesDeUnDatoX(datoX, nuevoNodo);

        (MensajeError, Nombre, posicion ) = MensajeValidator.MensajeInsertar(Mensaje, MensajeError, posicion, Nombre);
        datoX = string.Empty;
        YoutubeLink = string.Empty;

        PlayVideo();
    }

    void InsertarPosicionX()
    {
        Mensaje = lista.InsertarEnPosicion(posicion ?? 0, YoutubeLink, Nombre);
        (MensajeError, Nombre, posicion) = MensajeValidator.MensajeInsertar(Mensaje, MensajeError, posicion, Nombre);

        YoutubeLink = string.Empty;
        PlayVideo();
    }

    void InsertarNodoDespuesDeUnDatoX()
    {
        var nuevoNodo = new Nodo(YoutubeLink, Nombre);
        Mensaje = lista.InsertarDespuesDeUnDatoX(datoX, nuevoNodo);
        (MensajeError, Nombre, posicion) = MensajeValidator.MensajeInsertar(Mensaje, MensajeError, posicion, Nombre);

        datoX = string.Empty;
        YoutubeLink = string.Empty;
        PlayVideo();
    }


    void BuscarNodoPorDato()
    {
        var dato = DatoBuscado;
        var nodoEncontrado = lista.BuscarNodo(dato);

        if (nodoEncontrado != null)
        {
            lista.NodoActual = nodoEncontrado;
            MensajeBuscar = $"Nodo encontrado: {nodoEncontrado.Nombre} en posición {lista.ObtenerPosicionNodo(nodoEncontrado)}";
        }
        else
        {
            MensajeBuscar = $"Dato {dato} no encontrado";
        }

        DatoBuscado = string.Empty;
        PlayVideo();
    }

    void OrdenarLista()
    {
        Mensaje = lista.OrdenarLista();
        MensajeError = MensajeValidator.MensajeOrdenar(Mensaje, MensajeError);
        
    }


    private List<Nodo> nodosAux = new List<Nodo>();
    void RecorrerListaRecursivamente()
    {
        nodosAux.Clear();
        ListaEnlazadaDoble.RecorrerRecursivamente(lista.PrimerNodo, nodosAux);
        // Mensaje = string.Join(" -> ", nodosAux.Select(n => $"{n.Informacion} - {n.Nombre}"));

        PlayVideo();

    }
}